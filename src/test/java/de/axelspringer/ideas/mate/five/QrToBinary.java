package de.axelspringer.ideas.mate.five;

import javafx.scene.paint.Color;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;

public class QrToBinary {

    public static void main(String[] args) throws Exception {
//        InputStream is = QrToBinary.class.getClassLoader().getResourceAsStream("qr.png");
//        BufferedImage image = ImageIO.read(is);
//
//
//        String s = "";
//        for (int y = 0; y < image.getHeight(); y++) {
//            for (int x = 0; x < image.getWidth(); x++) {
//                int rgb = image.getRGB(x, y);
//                s += rgb == -1 ? 0 : 1;
//            }
//            s += "\n";
//        }
//
//        System.out.println(s);

        writeQrCode();
    }

    public static void writeQrCode() throws Exception {
        String code = "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111110000000110111101011001101011110000000111111111111\n" +
                "111111111110111110100100110001101111000110111110111111111111\n" +
                "111111111110100010110001101010000010110110100010111111111111\n" +
                "111111111110100010100101101100101010000010100010111111111111\n" +
                "111111111110100010111010011001100101111010100010111111111111\n" +
                "111111111110111110101011010110110011010110111110111111111111\n" +
                "111111111110000000101010101010101010101010000000111111111111\n" +
                "111111111111111111111110101111100000100111111111111111111111\n" +
                "111111111110000010000010011011111110000001010101111111111111\n" +
                "111111111110101111000111101010101101011011010001111111111111\n" +
                "111111111110101000110100100101111011000000110010111111111111\n" +
                "111111111111010111111101100010000011100100000101111111111111\n" +
                "111111111110101010111001010011101010000100100010111111111111\n" +
                "111111111111010001000110000011011001011011011001111111111111\n" +
                "111111111110101000100011110001100111100001111000111111111111\n" +
                "111111111111110111101010110010010000100011000110111111111111\n" +
                "111111111111110110001010101101010011010000100010111111111111\n" +
                "111111111111010011110111001011101101011011011001111111111111\n" +
                "111111111111011100011000110110101011000000011000111111111111\n" +
                "111111111110100101001001111010110111101101111110111111111111\n" +
                "111111111110111100011001010101001010001100100000111111111111\n" +
                "111111111111011101011010100011011101111011011001111111111111\n" +
                "111111111110110110110111100001100111000000111100111111111111\n" +
                "111111111111000011000110101110010011111000101110111111111111\n" +
                "111111111110110100110010001101111010001110100000111111111111\n" +
                "111111111110100011000111111100101101011011010101111111111111\n" +
                "111111111110111110011100010000101010110101001100111111111111\n" +
                "111111111110101001001101101010000110101111111110111111111111\n" +
                "111111111110110010101100001111101100000000001011111111111111\n" +
                "111111111111111111101010101110010001101011101111111111111111\n" +
                "111111111110000000101011110001100011001010100100111111111111\n" +
                "111111111110111110110111101011010100111011101100111111111111\n" +
                "111111111110100010100101101100011010000000000010111111111111\n" +
                "111111111110100010100100111011000001111100101111111111111111\n" +
                "111111111110100010101111000010101111101111011100111111111111\n" +
                "111111111110111110100100101110000101100011010110111111111111\n" +
                "111111111110000000100100001101101100011110000000111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111\n" +
                "111111111111111111111111111111111111111111111111111111111111";

        int dimension = 60;
        BufferedImage bufferedImage = new BufferedImage(dimension, dimension, BufferedImage.TYPE_INT_ARGB);

        String[] lines = code.split("\n");

        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            char[] chars = line.toCharArray();
            for (int j = 0; j < chars.length; j++) {
                int color = chars[j] == '1' ? Color.WHITE.hashCode() : 0xFF000000;
                bufferedImage.setRGB(j, i, color);
            }
        }
        ImageIO.write(bufferedImage, "png", new File("/Users/swaschni/Projekte/mate-challenge/" + System.currentTimeMillis() + ".png"));
    }
}
