package de.axelspringer.ideas.mate.five.challenges;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;
import org.mockito.runners.MockitoJUnitRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doAnswer;

@RunWith(MockitoJUnitRunner.class)
public class QrGeneratorTest {

    @InjectMocks
    private QrGenerator qrGenerator;

    @Mock
    private SymetricEncryption symetricEncryption;

    @Before
    public void beforeMethod() throws Exception {
        doAnswer(new ReturnsArgumentAt(0)).when(symetricEncryption).encrypt(anyString());
    }


    @Test
    public void testQrCode() throws Exception {
        String s = qrGenerator.generateQrText("barriwaschi+123@gmail.com");
        assertThat(s).isEqualTo("1111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111\n" +
                "1111000000011010111100000110110000000111\n" +
                "1111011111010111011001010111110111110111\n" +
                "1111010001011000110101001000110100010111\n" +
                "1111010001010100000000111100010100010111\n" +
                "1111010001011110010101000000110100010111\n" +
                "1111011111010101001001110001010111110111\n" +
                "1111000000010101010101010101010000000111\n" +
                "1111111111111001110011100000011111111111\n" +
                "1111000001000100000110101101101010101111\n" +
                "1111011010100110111101001010110111000111\n" +
                "1111000000010001101011110011111010101111\n" +
                "1111101111101001010111110001101001011111\n" +
                "1111111100010010000000111101001000111111\n" +
                "1111101110110110101101100000110111100111\n" +
                "1111010001010111111010011011000101101111\n" +
                "1111100011110011011111100011011011011111\n" +
                "1111100010000101000000110100001001101111\n" +
                "1111011011100000101101000000110110100111\n" +
                "1111011011001101111001110011000110101111\n" +
                "1111011001100111110011111010111101011111\n" +
                "1111111101010000001010101110001001101111\n" +
                "1111010011111100101101000110010010100111\n" +
                "1111011000001101101010011101101110101111\n" +
                "1111011111110000110111100011101110011111\n" +
                "1111010111010001001010111101000001110111\n" +
                "1111111111110000110101000011011100110111\n" +
                "1111000000010011011001010110010100001111\n" +
                "1111011111011101010101100000011100010111\n" +
                "1111010001010101001110101101000001100111\n" +
                "1111010001010011110110001110101001011111\n" +
                "1111010001010011101000010100010110001111\n" +
                "1111011111010100011001110001100010011111\n" +
                "1111000000010111101010101100010110101111\n" +
                "1111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111\n" +
                "1111111111111111111111111111111111111111\n"
        );


    }
}